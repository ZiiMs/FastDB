import { app, BrowserWindow, ipcMain, Menu, IpcMainEvent } from 'electron'
import { Connection } from 'mongoose'
import { Results } from '../src/interfaces/fetchDbs'
import { ConnectionInfo } from '../src/interfaces/data'

/* eslint-disable global-require */
// eslint-disable-next-line import/no-extraneous-dependencies

import {
    appMenu,
    explorerContextMenu,
    selectedContextMenu,
} from './templates/templates'

import { connect, loadDatabases } from './database'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    // eslint-disable-line global-require
    app.quit()
}

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 700,
        width: 1100,
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    })

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

    Menu.setApplicationMenu(Menu.buildFromTemplate(appMenu(mainWindow)))
    // Open the DevTools.
    mainWindow.webContents.openDevTools({ mode: 'detach' })
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit()
    }
})

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow()
    }
})

ipcMain.on('show-context-menu', (event: IpcMainEvent, selected: any) => {
    console.log(selected)
    let menu
    if (!selected) {
        menu = Menu.buildFromTemplate(explorerContextMenu(event))
    } else {
        menu = Menu.buildFromTemplate(selectedContextMenu(event, selected))
    }

    menu.popup()
})

ipcMain.on(
    'addNewConnection',
    async (event: IpcMainEvent, data: ConnectionInfo) => {
        // const {
        //     address: string,
        //     port: number,
        //     username: string,
        //     password: string,
        // } = data
        const { name, address, port, username, password } = data
        console.log(
            `${name} | ${address} | ${port} | ${username} | ${password}`
        )
        // console.log(JSON.stringify(data))
        const conn: Connection = await connect(address, port)
        if (conn) {
            conn.db.admin().listDatabases((err: any, results: Results) => {
                console.log('Count?')

                if (err) {
                    console.log(`Error: ${err}`)
                    return
                }
                // console.log(JSON.stringify(results))
                if (results.databases) {
                    const connInfo: ConnectionInfo = {
                        address,
                        port,
                        username,
                        password,
                        name,
                        databases: results.databases,
                    }
                    event.sender.send('fetchDbs', connInfo)
                }
            })
        }
    }
)

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
